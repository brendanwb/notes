-----------------------------------------------------------------------
- GIT NOTES  ----------------------------------------------------------
-----------------------------------------------------------------------
-Initialize a git repository
-----------------------------------------------------------------------
  $ git init
  $ git add .
  $ git commit -m "Initial commit"
-----------------------------------------------------------------------
-Creating a new Branch
-----------------------------------------------------------------------
  $ git checkout -b name-of-branch

-----------------------------------------------------------------------
-Branch Management
-----------------------------------------------------------------------
  $ git branch
    Lists all branches for the repository
  $ git branch -v
    Lists each branch with the most recent commit
  $ git branch --merged
    Shows which branches are merged into the branch you are currently on
  $ git branch --no-merged
    The opposite of merged

-----------------------------------------------------------------------
-Finished with Branch
-----------------------------------------------------------------------
  $ git add .
  $ git commit -m "Message"
  $ git checkout master
  $ git merge name-of-branch

-----------------------------------------------------------------------
-Push Branch to Remote
-----------------------------------------------------------------------
  $ git push origin branch-name

-----------------------------------------------------------------------
-Deleting a branch due to mistakes
-----------------------------------------------------------------------
  $ git add .
  $ git commit -m "Message"
  $ git checkout master
  $ git branch -D name-of-branch

-----------------------------------------------------------------------
-Deleting a branch after merge
-----------------------------------------------------------------------
  $ git branch name-of-branch -d

-----------------------------------------------------------------------
-Deleting a file you no longer want
-----------------------------------------------------------------------
  $ git rm path/name_of_file.ext -f

-----------------------------------------------------------------------
-Change the README
-----------------------------------------------------------------------
  $ git mv README.rdoc README.md
  - change the README.md file
  $ git commit -a -m "Improve the README"

-----------------------------------------------------------------------
-View the time of commits, merges and swithing from branch to branch
-----------------------------------------------------------------------
  $ git reflog --date=local

-----------------------------------------------------------------------
-Undo the last commit
-----------------------------------------------------------------------
  $ git reset --soft 'HEAD^'

-----------------------------------------------------------------------
-Recreate a deleted branch
-----------------------------------------------------------------------
  $ git reflog
  - Find the sha key in the log
  $ git checkout [sha]
  $ git checkout -b <branch-name>

-----------------------------------------------------------------------
-Track upstream changes to a branch
-----------------------------------------------------------------------
  $ git branch -u <upstream (typically origin)>/<branch-name>

Git Pull Request Steps in a Team

git push origin implementor-clean-up (the name of the branch)
git checkout develop (name of the branch you want to merge with)
git fetch (make sure you have the latest updates in the branch)
git merge origin/develop (merge your changes with the main branch)

MAKE SURE YOU SELECT THE CORRECT BRANCH TO COMPARE YOUR NEW BRANCH TO ON GITHUB

For code review, commit and push your code, then send the link to the commit

To view all branches including the ones you haven't worked on
git branch -a

What i found useful was to look at "git reflog" and look for the last commit that i did in master. Then do git reset --hard <commit_sha>

-----------------------------------------------------------------------
-These steps will only be necessary if you need to update your feature
 branch with the latest changes from develop (most of the time this
 won't need to be done):
-----------------------------------------------------------------------

1 - If the feature branch has lived a long life, it may need to be updated
  with changes from develop - in that case, rebase develop into your feature
  branch. First make sure you have the latest changes to develop:

  $(some_feature) git fetch

  $(some_feature) git rebase origin/develop

1a - If you hit some merge conflicts, you must resolve them and then continue
  your rebase (this could happen more than once depending on how out of sync
  your branch is). Git will guide you along the way. Assuming you have fixed
  your merge conflicts, you can then:

  $(some_feature) git add --all

  $(some_feature) git rebase --continue

  Repeat until the rebase is finished.

1b - If things get too scary and you want to get out of it, you can abort and
  your feature branch will be restored to the state it was in before you started
  rebasing:

  $(some_feature) git rebase --abort

2 - If you've already pushed your feature branch to github, it will be rejected
  after rebasing because you've rewritten history. You'll need to force push.

  $(some_feature) git push -f origin some_feature

  Note: This is fine to do with a feature branch that you own, but you should
  never do this on a public branch that you don't own (e.g. master or develop):

  Another Note: Be careful with force pushing. If you don't specify which branch
  you wish to push to, you could end up force pushing all of your upstream branches
  (depending on your git config), including master and develop!

  Setting git config: [http://stackoverflow.com/questions/948354/git-push-default-behavior]

3 - Merge the feature branch back into develop using the green button in the
  pull request.
